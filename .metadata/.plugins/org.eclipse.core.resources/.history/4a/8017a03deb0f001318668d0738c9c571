package com.vnu.parabolicflight;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.os.Bundle;
import android.os.Environment;
import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Intent;
import android.view.Menu;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.TextView;

import com.vnu.parabolicflight.util.Data;
import com.vnu.parabolicflight.util.DataExporting;

public class MeasureActivity extends Activity {

	Button stopButton, returnButton;
	boolean notStop = true;
	boolean display = false;

	private SensorManager mSensorManager;
	private Sensor mGyroSensor, mAccSensor, mGraSensor;

	TextView gyroscope_xval, gyroscope_yval, gyroscope_zval;
	TextView accelerometer_xval, accelerometer_yval, accelerometer_zval;
	TextView gravity_xval, gravity_yval, gravity_zval;

	String fileName, gyroscopeDataFileName, accelerometerDataFileName, gravityDataFileName;
	File fileData, gyroscopeDataFile, accelerometerDataFile, gravityDataFile;
	
	 ArrayList<Data> accelerometerData , gyroscopeData , gravityData;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_measure);

		gyroscope_xval = (TextView) findViewById(R.id.gyroscope_xval);
		gyroscope_yval = (TextView) findViewById(R.id.gyroscope_yval);
		gyroscope_zval = (TextView) findViewById(R.id.gyroscope_zval);

		accelerometer_xval = (TextView) findViewById(R.id.accelerometer_xval);
		accelerometer_yval = (TextView) findViewById(R.id.accelerometer_yval);
		accelerometer_zval = (TextView) findViewById(R.id.accelerometer_zval);

		gravity_xval = (TextView) findViewById(R.id.gravity_xval);
		gravity_yval = (TextView) findViewById(R.id.gravity_yval);
		gravity_zval = (TextView) findViewById(R.id.gravity_zval);

		stopButton = (Button) findViewById(R.id.stop_button);
		stopButton.setOnClickListener(new OnClickListener() {

			public void onClick(View arg0) {
			
				if (display) {
					Intent intent = new Intent(MeasureActivity.this , DisplayActivity.class);
					Bundle b = new Bundle();
					b.putString("file", accelerometerDataFileName);
					intent.putExtras(b);
					startActivity(intent);
					finish();
				} else {
					display = true;
					notStop = false;
					
					ProgressDialog progressDialog = ProgressDialog.show(MeasureActivity.this, "", "Exporting data...");
					
					new Thread() {

						public void run() {

						try{

						sleep(10000);

						} catch (Exception e) {

						Log.e("tag", e.getMessage());

						}

						// dismiss the progress dialog

						progressDialog.dismiss();

						}

						}.start();

					DataExporting.Exporting(accelerometerData, accelerometerDataFile);
					DataExporting.Exporting(gyroscopeData, gyroscopeDataFile);
					DataExporting.Exporting(gravityData, gravityDataFile);
					stopButton.setText("DISPLAY LOG FILE");
				}
			}
		});
		
		initDataFile();
		initSensor();
		initData();
	}
	
	private void initData() {
		accelerometerData = new ArrayList<Data>();
		gyroscopeData = new ArrayList<Data>();
		gravityData = new ArrayList<Data>();
	}

	private void initSensor() {
		mSensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);

		mGyroSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
		mAccSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
		mGraSensor = mSensorManager.getDefaultSensor(Sensor.TYPE_GRAVITY);
	}

	private void initDataFile() {

		fileName = "parabolic-flight-"
				+ String.valueOf(System.currentTimeMillis()) + ".txt";
		fileData = new File(Environment.getExternalStorageDirectory()
				.toString(), fileName);
		if (fileData.exists())
			fileData.delete();

		accelerometerDataFileName = "accelerometer-parabolic-flight-"
				+ String.valueOf(System.currentTimeMillis()) + ".txt";
		accelerometerDataFile = new File(Environment
				.getExternalStorageDirectory().toString(),
				accelerometerDataFileName);
		if (accelerometerDataFile.exists())
			accelerometerDataFile.delete();

		gyroscopeDataFileName = "gyroscope-parabolic-flight-"
				+ String.valueOf(System.currentTimeMillis()) + ".txt";
		gyroscopeDataFile = new File(Environment.getExternalStorageDirectory()
				.toString(), gyroscopeDataFileName);
		if (gyroscopeDataFile.exists())
			gyroscopeDataFile.delete();

		gravityDataFileName = "gravity-parabolic-flight-"
				+ String.valueOf(System.currentTimeMillis()) + ".txt";
		gravityDataFile = new File(Environment.getExternalStorageDirectory()
				.toString(), gravityDataFileName);
		if (gravityDataFile.exists())
			gravityDataFile.delete();

		try {
			fileData.createNewFile();
			accelerometerDataFile.createNewFile();
			gyroscopeDataFile.createNewFile();
			gravityDataFile.createNewFile();
		} catch (IOException e) {
		}
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.measure, menu);
		return true;
	}

	private SensorEventListener mGyroListener = new SensorEventListener() {

		@Override
		public void onAccuracyChanged(Sensor sensor, int arg1) {
			// TODO Auto-generated method stub
		}

		@Override
		public void onSensorChanged(SensorEvent event) {
			getGyroscope(event);
		}
	};

	private SensorEventListener mAccListener = new SensorEventListener() {

		@Override
		public void onAccuracyChanged(Sensor sensor, int arg1) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onSensorChanged(SensorEvent event) {
			getAccelerometer(event);
		}
	};

	private SensorEventListener mGraListener = new SensorEventListener() {

		@Override
		public void onAccuracyChanged(Sensor sensor, int accuracy) {
			// TODO Auto-generated method stub

		}

		@Override
		public void onSensorChanged(SensorEvent event) {
			getGravity(event);
		}

	};

	private void getAccelerometer(SensorEvent event) {
		float x = event.values[0];
		float y = event.values[1];
		float z = event.values[2];

		if (notStop) {
			accelerometerData.add(new Data(x,y,z,System.currentTimeMillis()));
			
			accelerometer_xval.setText("x:" + "\t\t" + Float.toString(x));
			accelerometer_yval.setText("y:" + "\t\t" + Float.toString(y));
			accelerometer_zval.setText("z:" + "\t\t" + Float.toString(z));
		}
	}

	private void getGyroscope(SensorEvent event) {
		float x = event.values[0];
		float y = event.values[1];
		float z = event.values[2];
		
		if (notStop) {
			gyroscopeData.add(new Data(x,y,z,System.currentTimeMillis()));
			
			gyroscope_xval.setText("x:" + "\t\t" + Float.toString(x));
			gyroscope_yval.setText("y:" + "\t\t" + Float.toString(y));
			gyroscope_zval.setText("z:" + "\t\t" + Float.toString(z));
		}
	}

	private void getGravity(SensorEvent event) {
		float x = event.values[0];
		float y = event.values[1];
		float z = event.values[2];
		
		if (notStop) {
			gravityData.add(new Data(x,y,z,System.currentTimeMillis()));
			
			gravity_xval.setText("x:" + "\t\t" + Float.toString(x));
			gravity_yval.setText("y:" + "\t\t" + Float.toString(y));
			gravity_zval.setText("z:" + "\t\t" + Float.toString(z));
		}
	}
	
	public void sensorRegister() {
		
		int rating = 100000;
		
		mSensorManager.registerListener(mGyroListener, mGyroSensor,rating);
		mSensorManager.registerListener(mAccListener, mAccSensor, rating);
		mSensorManager.registerListener(mGraListener, mGraSensor, rating);
	}

	public void sensorUnregister() {
		mSensorManager.unregisterListener(mGyroListener, mGyroSensor);
		mSensorManager.unregisterListener(mAccListener, mGyroSensor);
		mSensorManager.unregisterListener(mGraListener, mGraSensor);
	}

	@Override
	protected void onResume() {
		super.onResume();
		sensorRegister();
	}

	@Override
	protected void onPause() {
		sensorUnregister();
		super.onPause();
	}

	@Override
	public void onStop() {
		sensorUnregister();
		super.onStop();
	}
}
